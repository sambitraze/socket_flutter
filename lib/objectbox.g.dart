// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'models/message.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 8456916883959944447),
      name: 'ChatMessage',
      lastPropertyId: const IdUid(8, 6582085533975468591),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1877870634696382904),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4158125623636673198),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 103256054959688762),
            name: 'text',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3338020328502148158),
            name: 'reciever',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8323293757906405589),
            name: 'sender',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 374220905574216801),
            name: 'time',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 435733294571911054),
            name: 'messageType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6582085533975468591),
            name: 'messageStatus',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 8456916883959944447),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    ChatMessage: EntityDefinition<ChatMessage>(
        model: _entities[0],
        toOneRelations: (ChatMessage object) => [],
        toManyRelations: (ChatMessage object) => {},
        getId: (ChatMessage object) => object.id,
        setId: (ChatMessage object, int id) {
          object.id = id;
        },
        objectToFB: (ChatMessage object, fb.Builder fbb) {
          final uidOffset =
              object.uid == null ? null : fbb.writeString(object.uid!);
          final textOffset =
              object.text == null ? null : fbb.writeString(object.text!);
          final recieverOffset = object.reciever == null
              ? null
              : fbb.writeString(object.reciever!);
          final senderOffset =
              object.sender == null ? null : fbb.writeString(object.sender!);
          final messageTypeOffset = object.messageType == null
              ? null
              : fbb.writeString(object.messageType!);
          final messageStatusOffset = object.messageStatus == null
              ? null
              : fbb.writeString(object.messageStatus!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, textOffset);
          fbb.addOffset(3, recieverOffset);
          fbb.addOffset(4, senderOffset);
          fbb.addInt64(5, object.time.millisecondsSinceEpoch);
          fbb.addOffset(6, messageTypeOffset);
          fbb.addOffset(7, messageStatusOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ChatMessage(
              uid: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              text: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              reciever: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              sender: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              time: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)),
              messageType: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              messageStatus: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [ChatMessage] entity fields to define ObjectBox queries.
class ChatMessage_ {
  /// see [ChatMessage.id]
  static final id =
      QueryIntegerProperty<ChatMessage>(_entities[0].properties[0]);

  /// see [ChatMessage.uid]
  static final uid =
      QueryStringProperty<ChatMessage>(_entities[0].properties[1]);

  /// see [ChatMessage.text]
  static final text =
      QueryStringProperty<ChatMessage>(_entities[0].properties[2]);

  /// see [ChatMessage.reciever]
  static final reciever =
      QueryStringProperty<ChatMessage>(_entities[0].properties[3]);

  /// see [ChatMessage.sender]
  static final sender =
      QueryStringProperty<ChatMessage>(_entities[0].properties[4]);

  /// see [ChatMessage.time]
  static final time =
      QueryIntegerProperty<ChatMessage>(_entities[0].properties[5]);

  /// see [ChatMessage.messageType]
  static final messageType =
      QueryStringProperty<ChatMessage>(_entities[0].properties[6]);

  /// see [ChatMessage.messageStatus]
  static final messageStatus =
      QueryStringProperty<ChatMessage>(_entities[0].properties[7]);
}
